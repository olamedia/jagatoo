/**
 * Copyright (c) 2007-2009, JAGaToo Project Group all rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * 
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * 
 * Neither the name of the 'Xith3D Project Group' nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) A
 * RISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE
 */
package org.jagatoo.input.listeners;

import org.jagatoo.input.devices.components.Key;
import org.jagatoo.input.events.KeyPressedEvent;
import org.jagatoo.input.events.KeyReleasedEvent;
import org.jagatoo.input.events.KeyStateEvent;
import org.jagatoo.input.events.KeyTypedEvent;

/**
 * <p>Listens for generic keyboard events generated by any complying keyboard input API 
 * (a class which implements KeyboardDevice2). The listener MUST be registered with
 * a device to recieve any events.</p>
 * 
 * <p>Possible events are key pressed and released.  The key codes used are from the
 * <code>Keys</code> class.  Any input API which uses different key constants must
 * convert them to maintain input abstraction.
 * 
 * @author Marvin Froehlich (aka Qudus)
 */
public interface KeyboardListener
{
    /**
     * Used by implementing input classes to process a key pressed event.
     * This method is generally invoked by Keyboard.
     * 
     * @param e the KeyboardEvent, with all assotiated information
     * @param key
     */
    public void onKeyPressed( KeyPressedEvent e, Key key );
    
    /**
     * Used by implementing input classes to process a key released event.
     * This method is generally invoked by Keyboard.
     * 
     * @param e the KeyboardEvent, with all assotiated information
     * @param key
     */
    public void onKeyReleased( KeyReleasedEvent e, Key key );
    
    /**
     * Used by implementing input classes to process a key state changed event.
     * This method is generally invoked by Keyboard.
     * 
     * @param e the KeyboardEvent, with all assotiated information
     * @param key
     * @param state
     */
    public void onKeyStateChanged( KeyStateEvent e, Key key, boolean state );
    
    /**
     * Used by implementing input classes to process a key typed event.
     * It is not the same as onKeyPressed or onKeyReleased since
     * this even returns a char. It should be used e.g. for widgets
     * which need a text input.
     * 
     * @param e the KeyboardEvent, with all assotiated information
     * @param keyChar
     */
    public void onKeyTyped( KeyTypedEvent e, char keyChar );
}
